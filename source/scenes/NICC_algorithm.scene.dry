title: Election
on-arrival: {!
// calculate normalized north_class voting amounts (0 to 100)
for (var c of Q.north_classes) {
    var north_class_votes = 0;
    for (var north_party of Q.north_parties) {
        if (Q[c+'_'+north_party] < 0) {
            Q[c+'_'+north_party] = 0;
        }
        north_class_votes += Q[c+'_'+north_party];
    }
    for (var north_party of Q.north_parties) {
        Q[c + '_' + north_party + '_normalized'] = 100*Q[c+'_'+north_party]/north_class_votes;
        Q[c + '_' + north_party + '_display'] = Math.round(100*Q[c+'_'+north_party]/north_class_votes);
    }
}

// 1. calculate support for each of the north_parties
var total_support = 0;
for (var north_party of Q.north_parties) {
    var north_party_support = 0;
    for (var c of Q.north_classes) {
        // but this version is somewhat more entertaining and allows for wilder swings in votes.
        // the other option basically necessitates a multi-north_class strategy. while the first option allows for a working-north_class-only strategy.
        if (Q.old_demographics) {
            // okay i'm pretty sure this is wrong, and the hard version is correct
            // basically this allows for "spillover" effects in other demographics.
            // so you can campaign among say the workers and 
            north_party_support += Q[c]*Q[c+'_'+north_party];
            // However, there should be a cap on how much north_party support you can get in a certain demo.
        } else  {
            north_party_support += Q[c]*Q[c+'_'+north_party+'_normalized'];
        }
    }
    Q[north_party + '_support'] = north_party_support;
    total_support += north_party_support;
}
// 2. normalize support (fraction)
// 3. Round to integers
// TODO: round to 1 decimal instead of rounding to integers
// to do that, we multiply north_party_normalized*1000 and divide the rounded number by 10.
for (var north_party of Q.north_parties) {
    Q[north_party+'_normalized'] = Q[north_party + '_support']/total_support;
    Q[north_party+'_votes_dec'] = Math.round(Q[north_party+'_normalized']*1000)/10;
    if (Q.use_decimals) {
        Q[north_party+'_votes'] = Q[north_party+'_votes_dec'];
        Q[north_party + '_votes_disp'] = Q[north_party+'_votes'];
    } else {
        Q[north_party+'_votes'] = Math.round(Q[north_party+'_normalized']*100);
        Q[north_party + '_votes_disp'] = Q[north_party+'_votes_dec'].toFixed(1);
    }
    //Q[north_party+'_votes'] = Q[north_party+'_votes_dec'];
    // display
}
!}
go-to: jumpScene

# note: this is a helpful utility to deal with elections and so on.
