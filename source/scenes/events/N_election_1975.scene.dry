title: Northern Ireland Constitutional Convention Elections
new-page: true
tags: event
priority: -1
view-if: (year = 1975 and month == 5)
max-visits: 1
set-jump: post_election_1975

# TODO: should there be an image?

# the low priority means that this event is only seen after all other events are resolved for the month.

= Elections, [+ month : month +] [+ year +]

The Northern Ireland Constitutional Convention elections are to be held now.

- @NICC_algorithm: What a waste of taxpayer money...

@post_election_1975
on-arrival: {!
// set old results
// election threshold constitutional reform
// banning north_parties
var new_north_party_sum = 0;
for (var north_party of Q.north_parties) {
    Q['old_' + north_party + '_r'] = Q[north_party + '_r'];
    if (Q.constitutional_reform > 0) {
        if (Q[north_party + '_votes'] < Q.electoral_threshold || (Q.electoral_threshold > 1 && north_party == 'other') || Q[north_party + '_banned']) {
            Q[north_party + '_r'] = 0;
        } else {
            Q[north_party + '_r'] = Q[north_party + '_votes'];
        }
        new_north_party_sum += Q[north_party + '_r'];
    } else {
        Q[north_party + '_r'] = Q[north_party + '_votes'];
    }
    // if we use decimals, then we might want to truncate the numbers
    if (Q.use_decimals) {
        Q[north_party + '_r_disp'] = Q[north_party+'_r'].toFixed(1);
    }  else {
            Q[north_party + '_r_disp'] = Q[north_party+'_r'];
    }
    Q['change_' + north_party + '_r'] = Q[north_party + '_r'] - Q['old_' + north_party + '_r'];
    var sign = Q['change_' + north_party + '_r'] > 0 ? '+'  : '';
    Q['str_change_' + north_party] = sign + Q['change_' + north_party + '_r'];//.toFixed(1);
}
// calculate new north_party sum if electoral reform
if (Q.electoral_threshold && Q.electoral_threshold > 0) {
    for (var north_party of Q.north_parties) {
        if (Q[north_party + '_r'] > 0) {
            if (Q.use_decimals) {
                Q[north_party + '_r'] = Math.round(Q[north_party + '_r']*1000/new_north_party_sum)/10;
            } else {
                Q[north_party + '_r'] = Math.round(Q[north_party + '_r']*100/new_north_party_sum);
            }
        }
        if (Q.use_decimals) {
            Q[north_party + '_r_disp'] = Q[north_party+'_r'].toFixed(1);
        } else {
            Q[north_party + '_r_disp'] = Q[north_party+'_r'];
        }
        Q['change_' + north_party + '_r'] = Q[north_party + '_r'] - Q['old_' + north_party + '_r'];
        var sign = Q['change_' + north_party + '_r'] > 0 ? '+'  : '';
        Q['str_change_' + north_party] = sign + Q['change_' + north_party + '_r'];//.toFixed(1);
    }
}

var election_result = {'date': new Date(Q.year, Q.month - 1)};
for (var party of Q.parties) {
    election_result[party] = Q[party + '_r'];
}
Q.election_records.push(election_result);
!}

= Election results

{!<svg id="reichstag" style="width: 500px; height: 250px;"> </svg>!}

{!<table>!} 
{!<tr><td>Party</td><td>Vote share</td><td>% Change</td></tr>!}
{!<tr><td><div class="box" style='background-color:#8B0000'> </div> !} SDLP: {!</td><td>!} [+ SDLP_r +]% {!</td><td>!} [+ str_change_SDLP +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#DCCA4A'> </div> !} Alliance: {!</td><td>!} [+ alliance_r +]% {!</td><td>!} [+ str_change_alliance +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#000'> </div> !} NILP: {!</td><td>!} [+ NILP_r +]% {!</td><td>!} [+ str_change_NILP +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#D5AC27'> </div> !} UUP: {!</td><td>!} [+ UUP_r +]% {!</td><td>!} [+ str_change_UUP +] {!</td></tr>!}
 
{!<tr><td><div class="box" style='background-color:#a0a0a0'> </div> !} DUP: {!</td><td>!} [+ DUP_r +] % {!</td><td>!} [+ str_change_DUP +] {!</td></tr>!}

{!<tr><td><div class="box" style='background-color:#3f7bc1'> </div> !} Vanguard: {!</td><td>!} [+ Vanguard_r +]% {!</td><td>!} [+ str_change_Vanguard +] {!</td></tr>!}

{!</table>!}
